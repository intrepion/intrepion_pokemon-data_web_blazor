@page "/admin/company/add"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation

<PageTitle>Company Add</PageTitle>

@if (Company is not null)
{
  <CompanyForm Busy="Busy" 
         Company="Company" 
         IsAdd="true"
         CancelRequest="Cancel"
         ValidationResult="@(async (success) => await ValidationResultAsync(success))" />
}

@if (Success)
{
  <br />
  <div class="alert alert-success">The Company was successfully added.</div>
}

@if (Error)
{
  <br />
  <div class="alert alert-danger">Failed to add the Company (@ErrorMessage).</div>
}

@code {
  private Company? Company { get; set; }

  private bool Busy;

  private bool Success;

  private bool Error;

  private string ErrorMessage = string.Empty;

  protected override void OnInitialized()
  {
    Company = new();
  }

  private async Task ValidationResultAsync(bool success)
  {
    if (Busy)
    {
      return;
    }

    if (!success)
    {
      Success = false;
      Error = false;
      return;
    }

    Busy = true;

    using var context = DbFactory.CreateDbContext();

    if (Company is not null)
    {
      context.Companies?.Add(Company);
    }

    try
    {
      await context.SaveChangesAsync();
      Success = true;
      Error = false;

      Navigation.NavigateTo($"/admin/company/view/{Company?.Id}");
    }
    catch (Exception ex)
    {
      Success = false;
      Error = true;
      ErrorMessage = ex.Message;
      Busy = false;
    }
  }

  private void Cancel() => Navigation.NavigateTo($"/admin/company");
}
