<h1>@Mode GameConsole</h1>

<hr />
@if (GameConsole is not null)
{
    <EditForm Model="GameConsole" OnInvalidSubmit="(async () => await HandleSubmitAsync(false))" OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h2>Is Test?</h2>
        <p>
            <label>
                Is Test?:
                <InputCheckbox @bind-Value="GameConsole.IsTest" @oninput="HandleIsTestChange"/>
            </label>
        </p>
        <h2>Name</h2>
        <p>
            <label>
                Name:
                <InputText @bind-Value="GameConsole.Name" @oninput="HandleNameChange"/>
            </label>
        </p>
        @* PropertyFormCodePlaceholder *@

        <br />
        <button type="button" disabled="@Busy" class="btn btn-warning" @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit" class="btn btn-primary">
            Submit
        </button>
    </EditForm>
}

@code {
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    [Parameter]
    public EventCallback CancelRequest { get; set; }

    [Parameter]
    public bool IsAdd { get; set; }

    [Parameter]
    public GameConsole? GameConsole { get; set; }

    [Parameter]
    public GameConsole? DbGameConsole { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    private string Mode => IsAdd ? "Add" : "Edit";

    private async Task CancelAsync() => await CancelRequest.InvokeAsync(null);

    private async Task HandleSubmitAsync(bool isValid) => await ValidationResult.InvokeAsync(isValid);

    private void HandleIsTestChange(ChangeEventArgs changeEventArgs)
    {
        // NormalizedCodeIsTestPlaceholder
    }

    private void HandleNameChange(ChangeEventArgs changeEventArgs)
    {
        if (GameConsole == null)
        {
            return;
        }

        if (changeEventArgs == null)
        {
            return;
        }

        if (changeEventArgs.Value == null)
        {
            return;
        }

        GameConsole.NormalizedName = ((string)changeEventArgs.Value).ToUpperInvariant();

        // NormalizedCodeNamePlaceholder
    }

    // HandleChangeCodePlaceholder
}
